"""
The main logic module of the bot.
"""

import google_api
import telebot
from telebot import types
import datetime
import timechecker
from config import config

bot = telebot.TeleBot('2136810130:AAHO_POj-WV0GuqTOJ1iqU9s38o86ZELX6A')


# Launching a bot for a user and generating chat data in config
@bot.message_handler(commands=['start'])
def start_message(message):

    config[message.chat.id] = {
        'first_name': message.from_user.first_name,
        'start_message': True,
        'start': False,
        'interval': None,
        'time_last_message': None,
    }

    bot.send_message(message.chat.id, f"üëã–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!üëã\n"
                                      f"üìà–Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Å–≤–æ–∏—Ç—å –Ø–ü Python.\n"
                                      'üìÅ–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–∏–¥–µ–æ—É—Ä–æ–∫–∏", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∞–º.\n'
                                      'üìò–î–ª—è –∏–∑—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '
                                      '"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã".\n'
                                      'üïê–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–Ω–µ–º —Ä–∞–±–æ—Ç—É, —É–∫–∞–∂–∏, –∫–∞–∫ —á–∞—Å—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ '
                                      '–æ –∑–∞–Ω—è—Ç–∏—è—Ö?\n –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –æ–±–æ–∑–Ω–∞—á–∞—é—â–µ–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö. –ï—Å–ª–∏ —á—Ç–æ, —Ç—ã –≤—Å–µ–≥–¥–∞ '
                                      '–º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"')


@bot.message_handler(commands=['stop'])
def stop(message):
    chat_info = config[message.chat.id]

    chat_info['start'] = False
    chat_info['interval'] = None
    chat_info['time_last_message'] = None
    chat_info['start_message'] = False

    bot.send_message(message.chat.id, "–ù–∞–¥–µ—é—Å—å, –º–Ω–µ —É–¥–∞–ª–æ—Å—å —Ç–µ–±–µ –ø–æ–º–æ—á—å!\n"
                                      "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–Ω–æ–≤–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start.\n"

                                      "–Ø –±—É–¥—É –æ—á–µ–Ω—å —Ä–∞–¥ —Å —Ç–æ–±–æ–π –µ—â–µ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å!")


# Input Message Handler
@bot.message_handler(content_types=['text'])
def func(message):
    # Relevant when restarting the bot
    if message.chat.id not in config:
        bot.send_message(message.chat.id, '–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
    else:

        # Checking for chat registration is necessary to prevent a config error without a set reminder interval
        if config[message.chat.id]['start']:

            gs = google_api.GoogleSheet()

            if message.text == "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã":

                markup_message = types.InlineKeyboardMarkup(row_width=1)

                btns = []
                for title, url in gs.read_data('List!C:D'):
                    btns.append(types.InlineKeyboardButton(title, url=url))
                markup_message.add(*btns)

                bot.send_message(message.chat.id, f"{message.from_user.first_name}, "
                                                  f"–∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ "
                                                  f"–∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø–æ–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è ‚¨áÔ∏è",
                                 reply_markup=markup_message)

            elif message.text == "–í–∏–¥–µ–æ—É—Ä–æ–∫–∏":
                markup_message = types.InlineKeyboardMarkup(row_width=1)
                btns = []

                for title, url in gs.read_data('List!A:B'):
                    btns.append(types.InlineKeyboardButton(title, url=url))

                markup_message.add(*btns)
                bot.send_message(message.chat.id,
                                 f"{message.from_user.first_name}, "
                                 f"üé¨ –ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ—É—Ä–æ–∫–æ–≤ ‚¨áÔ∏è",
                                 reply_markup=markup_message)

            elif message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
                config[message.chat.id]['start'] = False
                bot.send_message(message.chat.id, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤! üïê")

            else:
                bot.send_message(message.chat.id, "üò¢ –ü—Ä–æ—Å—Ç–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. üò¢")

            # Setting the time of the last message after which the bot will remind user about the training
            now = datetime.datetime.now()
            config[message.chat.id]['time_last_message'] = now - datetime.timedelta(microseconds=now.microsecond)

        elif config[message.chat.id]['start_message']:
            # Checkin int number
            try:
                interval = int(message.text)
                if interval <= 0:
                    raise ValueError
            except ValueError:
                bot.send_message(message.chat.id, "üßê –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª. üßê\n"
                                                  "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! (–í–≤–µ–¥–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ) ")
            else:

                # Generating main menu after successful converting
                markup_main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)

                btn1 = types.KeyboardButton("–í–∏–¥–µ–æ—É—Ä–æ–∫–∏")
                btn2 = types.KeyboardButton("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
                btn3 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
                markup_main_menu.add(btn1, btn2, btn3)

                bot.send_message(message.chat.id, "üìÜ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã —Ç–æ—á–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—É–¥–µ—à—å! üìÜ\n"
                                                  f" ‚úÖ –ö–∞–∂–¥—ã–µ {interval} "
                                                  f"—á–∞—Å–æ–≤ —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ–± –æ–±—É—á–µ–Ω–∏–∏ ‚úÖ\n"
                                                  "üìä –ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —É—á–∏—Ç—å—Å—è! üìä\n", reply_markup=markup_main_menu)

                config[message.chat.id]['start'] = True
                config[message.chat.id]['interval'] = interval

            now = datetime.datetime.now()
            config[message.chat.id]['time_last_message'] = now - datetime.timedelta(microseconds=now.microsecond)
        else:
            bot.send_message(message.chat.id, '–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')


timechecker.TimeChecker(bot).start()

bot.polling(none_stop=True, interval=0)
